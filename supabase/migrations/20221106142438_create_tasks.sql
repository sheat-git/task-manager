-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.tasks
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    title character varying COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    content text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    done boolean NOT NULL DEFAULT false,
    created_at timestamp without time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
    modified_at timestamp without time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
    finished_at timestamp without time zone,
    expired_at timestamp without time zone,
    priority smallint NOT NULL DEFAULT 1,
    CONSTRAINT tasks_pkey PRIMARY KEY (id),
    CONSTRAINT tasks_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tasks
    OWNER to postgres;

ALTER TABLE IF EXISTS public.tasks
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.tasks TO anon;

GRANT ALL ON TABLE public.tasks TO authenticated;

GRANT ALL ON TABLE public.tasks TO postgres;

GRANT ALL ON TABLE public.tasks TO service_role;
CREATE POLICY "Enable all for users based on user_id"
    ON public.tasks
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));

CREATE TABLE IF NOT EXISTS public.tags
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    description text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    created_at timestamp without time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
    color integer,
    CONSTRAINT tags_pkey PRIMARY KEY (id),
    CONSTRAINT tags_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tags
    OWNER to postgres;

ALTER TABLE IF EXISTS public.tags
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.tags TO anon;

GRANT ALL ON TABLE public.tags TO authenticated;

GRANT ALL ON TABLE public.tags TO postgres;

GRANT ALL ON TABLE public.tags TO service_role;
CREATE POLICY "Enable all for users based on user_id"
    ON public.tags
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));

CREATE TABLE IF NOT EXISTS public."task-tag-relation"
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    task_id uuid NOT NULL,
    tag_id uuid NOT NULL,
    CONSTRAINT "task-tag-relation_pkey" PRIMARY KEY (id),
    CONSTRAINT "task-tag-relation_tag_id_fkey" FOREIGN KEY (tag_id)
        REFERENCES public.tags (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "task-tag-relation_task_id_fkey" FOREIGN KEY (task_id)
        REFERENCES public.tasks (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "task-tag-relation_user_id_fkey" FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."task-tag-relation"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."task-tag-relation"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."task-tag-relation" TO anon;

GRANT ALL ON TABLE public."task-tag-relation" TO authenticated;

GRANT ALL ON TABLE public."task-tag-relation" TO postgres;

GRANT ALL ON TABLE public."task-tag-relation" TO service_role;
CREATE POLICY "Enable all for users based on user_id"
    ON public."task-tag-relation"
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));
